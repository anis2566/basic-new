generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String @unique

  name        String
  email       String  @unique
  avatar      String?
  role        String  @default("User")
  status      String  @default("Pending")
  phone       String?
  referalCode String  @unique
  isNewUser   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@index([role, status])
  @@index([status, createdAt])
}

model House {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  roomCount Int

  rooms Room[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  capacity       Int
  availableTimes String[] @default([])
  bookTimes      String[] @default([])

  houseId String @db.ObjectId
  house   House  @relation(fields: [houseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Counter {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  value Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  session     String
  studentId   Int
  name        String
  nameBangla  String
  fName       String
  mName       String
  gender      String
  dob         DateTime
  nationality String
  religion    String
  imageUrl    String?

  school    String
  className String
  section   String?
  shift     String?
  group     String?
  roll      Int

  fPhone String
  mPhone String

  presentHouseNo    String
  presentMoholla    String
  presentPost       String
  presentThana      String
  permanentVillage  String
  permanentPost     String
  permanentThana    String
  permanentDistrict String
  isPresent         Boolean @default(true)
  leftReason        String?

  admissionFee Int
  salaryFee    Int

  admissionPayments AdmissionPayment[]
  salaryPayments    SalaryPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdmissionFee {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  className String @unique
  amount    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalaryFee {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  className String
  group     String?
  amount    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdmissionPayment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  className     String
  amount        Int
  method        String
  status        String
  paymentStatus String    @default("Unpaid")
  session       String
  month         String
  paidAt        DateTime?

  studentId String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalaryPayment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  transactionId String?
  amount        Int
  session       String
  month         String
  className     String
  method        String?
  status        String
  paymentStatus String    @default("Unpaid")
  note          String?
  paidAt        DateTime?

  studentId String  @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
